from machine import Pin, I2C
from sh1106 import SH1106_I2C
import framebuf
from time import sleep
from mfrc522 import MFRC522
from rfidaccess import RfidAccess
import utime

# items for rfid reader
reader = MFRC522(spi_id=0,sck=2,miso=4,mosi=3,cs=5,rst=6)

# # items for display screen
# i2c=I2C(0,sda=Pin(12), scl=Pin(13), freq=400000)
# 
# oled = SH1106_I2C(128, 64, i2c)
# #bytearray for a gamepad logo
# TH = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x1f\xff\xff\xff\xff\xff\xff\xfe\x00\x03\xff\xff\xff\xff\xe0\x00\x07\xff\xff\xff\xff\xff\xff\xfc\x00\x01\xff\xff\xff\xff\xe0\x00\x07\xff\xff\xff\xff\xff\xff\xf8\x00\x00\xff\xff\xff\xff\xc0\x00\x07\xff\xff\xff\xff\xff\xff\xf8\x00\x00\xff\xff\xff\xff\xc0\x00\x03\xff\xff\xff\xff\xff\xff\xf8\x00\x00\xff\xff\xff\xff\xc0\x00\x03\xff\xff\xff\xff\xff\xff\xf8\x00\x00\xff\xff\xff\xff\xc0\x00\x03\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x7f\xff\xff\xff\xc0\x00\x03\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x7f\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xff\xff\xfe\x01\xff\x80\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x1f\xff\xff\xfc\x01\xe7\xc0\x00\x00\x00\x00\x00\x00\x00`p\x07\xff\xff\xf8\x01\xff\xc0\x00\x00\x00\x00\x00\x00\x00`0\x03\xff\xff\xf0\x01\xff\xc0\x00\x00\x00\x00\x00\x00\x00@0\x01\xff\xff\xe0\x01\x81\x80\x00\x00\x00\x00\x00\x00\x00@0\x00\xff\xff\xc0\x01\x81\xc0\x00\x00\x00\x00\x00\x00\x00`0\x00\xff\xff\xc0\x03\x81\xc0\x00\x00\x00\x00\x00\x00\x00pp\x00\x7f\xff\x83\xff\x81\xff\xc0\x00\x00\x00\x00\x00\xff\xff\xff\xf0\x7f\xff\x83\xff\xc3\xff\xc0\x00\x00\x00\x00\x00\xc1\xff\xfcp?\xff\x83\xe0\xfe\x07\xc0\x00\x00\x00\x00\x00\x80\xff\xf0\x10?\xff\x03`|\x06\xc0\x00\x00\x00\x00\x00\x80\x7f\xf0\x10?\xff\x03`<\x06\xc0\x00\x00\x00\x00\x00\x80\x7f\xf0\x10?\xff\x03\xe0~\x07\xc0\x00\x00\x00\x00\x00\x80\x7f\xf0\x10\x1f\xff\x03\xff\xe7\xff\xc0\x00\x00\x00\x00\x00\xc0\xff\xf0\x10\x1f\xff\x03\xff\x81\xff\xc0\x00\x00\x00\x00\x00\xe3\xff\xfcp\x1f\xfe\x01\xff\x81\xff\xc0\x00\x00\x00\x00\x00\x7f\xf9\xff\xf0\x1f\xfe\x00\x03\x81\xc0\x00\x00\x00\x00\x00\x00\x00`p\x00\x1f\xfe\x00\x01\x81\xc0\x00\x00\x00\x00\x00\x00\x00@0\x00\x1f\xfe\x00\x01\xaf\xc0\x00\x00\x00\x00\x00\x00\x00@0\x00\x1f\xfe\x00\x01\xff\xc0\x03\x00\x00\x00\x000\x00@0\x00\x0f\xfe\x00\x01\xe7\xc08p\x00\x00\x03\x87\x00@0\x00\x0f\xfc\x00\x01\xff\xc0\xc0\x0c\x00\x00\x06\x00\xc0pp\x00\x0f\xfc\x00\x01\xff\x80\x80\x06\x00\x00\x08\x00`\x7f\xe0\x00\x0f\xfc\x00\x00\x00\x03\x00\x02\x00\x00\x10\x000\x00\x00\x00\x0f\xfc\x00\x00\x00\x02\x00\x01\x00\x00 \x00\x10\x00\x00\x00\x07\xfc\x00\x00\x00\x02\x00\x01\x80\x00 \x00\x08\x00\x00\x00\x07\xf8\x00\x00\x00\x02\x00\x01\x80\x00 \x00\x08\x00\x00\x00\x07\xf8\x00\x00\x00\x02\x00\x01\x80\x00 \x00\x08\x00\x00\x00\x07\xf8\x00\x00\x00\x02\x00\x01\x80\x00 \x00\x18\x00\x00\x00\x07\xf8\x00\x00\x00\x02\x00\x01\x00\x00 \x00\x10\x00\x00\x00\x03\xf8\x00\x00\x00\x03\x00\x03\x00\x00\x10\x00\x10\x00\x00\x00\x03\xf8\x00\x00\x00\x01\x80\x06\x00\x00\x18\x00 \x00\x00\x00\x03\xf0\x00\x00\x00\x00\xc0\x0c\x7f\xff\x8c\x00\xc0\x00\x00\x00\x03\xf0\x00\x00\x00\x180p\x7f\xff\xc3\x03\x02\x00\x00\x00\x03\xf0\x00\x00\x00\x1c\x0f\xc0\xff\xff\xe0\xfc\x0f\x00\x00\x00\x03\xf0\x00\x00\x00>\x00\x03\xff\xff\xf0\x00\x1f\x00\x00\x00\x01\xf0\x00\x00\x00\x7f\xc0\x0f\xff\xff\xfe\x00\x7f\x80\x00\x00\x01\xe0\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xc0\x00\x00\x01\xe0\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x00\x00\x01\xe0\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe0\x00\x00\x01\xe0\x00\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x01\xe0\x00\x00\x03\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x00\x01\xe0\x00\x00\x03\xff\xff\xff\xff\xff\xff\xff\xff\xf8\x00\x00\x01\xe0\x00\x00\x07\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\x00\x01\xf0\x00\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00\x00\x01\xf0\x00\x00\x0f\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x00\x00\x03\xf8\x00\x00\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x07\xfc\x00\x00?\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x0f\xfe\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\x00\x1f\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\x00\x7f\xff\xe0\x07\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
# fb = framebuf.FrameBuffer(TH,128,64, framebuf.MONO_HLSB)
# 
# 
# #Display the graphics
# oled.fill(0)
# oled.blit(fb,0,0)
# oled.show()
# sleep(2)
# 
# #Draw a black box on which to display text
# oled.fill_rect(23, 0, 85, 10, 0)
# oled.show()
# #Display text on the black box
# oled.text("Game Night", 28, 0)
# oled.show()
# sleep(2)
# 
# #Draw a black box on which to display text
# oled.fill_rect(28, 52, 75, 10, 0)
# oled.show()
# #Display text on the black box
# oled.text("Load Card", 30, 52)
# oled.show()
# sleep(2)

# rfid reader
access = RfidAccess()

print("")
print("Please place card on reader")
print("")

previous_card = 0
card_id_number = 1

while True:
    reader.init()
    (stat, tag_type) = reader.request(reader.REQIDL)
    if stat == reader.OK:
        (stat, uid) = reader.SelectTagSN()
        card = int.from_bytes(bytes(uid),"little",False)
        card_id_number = int(card)
        if card_id_number == previous_card or False:
            pass
        else:
            print(f"Card ID: {card_id_number}")
            previous_card = card_id_number


        
print("Card done!")

# #Once game is loaded display the graphics below
# oled.fill(0)
# oled.blit(fb,0,0)
# oled.show()
# oled.fill_rect(0, 35, 128, 10, 0)
# oled.show()
# #Display text on the black box
# oled.text("Game in progress", 0, 35)
# oled.show()
# sleep(2)
# 
# #Code for button pushes tbc
# push_button_1 = Pin(3, Pin.IN)  
# push_button_2 = Pin(4, Pin.IN)
# counter = 0
# while True:
#     if push_button_1.value() == True:
#         print(f"Button 1 Pushed {counter}")
#         counter += 1
#     elif push_button_2.value() == True:
#         print(f"Button 2 Pushed {counter}")
#         counter += 1
#     else:
#         pass